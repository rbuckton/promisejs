var fs = require("fs");

file("Future.ts");
file("Tests.ts");
file("../Header.txt");

tsc("Future.js", ["Future.ts", "../Header.txt"], ["Future.ts"], { header: "../Header.txt" });
tsc("Tests.js", ["Tests.ts", "../Header.txt"], ["Tests.ts"], { header: "../Header.txt" });

task("default", ["test"]);
task("build", ["Future.js", "Tests.js"]);
task("clean", [], function() {
    if (fs.existsSync("Future.js")) fs.unlinkSync("Future.js");
    if (fs.existsSync("Tests.js")) fs.unlinkSync("Tests.js");
});
task("rebuild", ["clean", "build"]);
task("test", ["Future.js", "Tests.js", "Future.ts", "Tests.ts", "build"], function() {
    var cmd = "node Tests.js";
    console.log(cmd);
    jake.exec([cmd], function () {
        complete();
    }, { printStdout: true, printStderr: true, breakOnError: false });    
}, { async: true });
task("world", ["clean", "build", "test"]);
function copy(dest, source) {
    if (!dest) {
        dest = {};
    }
    if (source) {
        Object.getOwnPropertyNames(source).forEach(function (name) { Object.defineProperty(dest, name, Object.getOwnPropertyDescriptor(source, name)); });
    }
    return dest;
}

function tsc(target, prereqs, sources, options) {
    options = copy({ target: "ES5" }, options);
    file(target, prereqs, function () {
        var out = target;
        var cmd = "tsc";
        if (options.declaration) cmd += " --declaration";
        if (options.cflowu) cmd += " --cflowu";
        if (options.comments) cmd += " --comments";
        if (options.declcomments) cmd += " --declcomments";
        if (options.target) cmd += " --target " + options.target;
        if (options.module) cmd += " --module " + options.module;
        if (options.debug) cmd += " --sourcemap";
        if (options.outDir) {
            cmd += " --out " + options.outDir;
        }
        else {
            if (!/^amd$/i.test(options.module)) {
                cmd += " --out " + target;
            }
        }
        cmd += " " + sources.join(" ");
        console.log(cmd);
        jake.exec([cmd], function () {
        
            if (options.header) {
                var headerSrc = fs.readFileSync(options.header).toString();
                fs.writeFileSync("temp.js", headerSrc.trim() + "\r\n");
                
                var targetSrc = fs.readFileSync(target).toString();
                fs.appendFileSync("temp.js", targetSrc.trim());
                
                fs.renameSync("temp.js", target);
            }
        
            complete();
        }, { async: true, printStdout: true, printStderr: true, breakOnError: false });
    }, { async: true });
}